syntax = "proto3";

package blueapi.admin.v1;

import "api/acctgroup.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/alphauslabs/blueapi/admin";
option java_package = "cloud.alphaus.api.admin";
option java_outer_classname = "AdminProto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Alphaus Blue API reference";
    description: "Alphaus provides an API for interacting with its services. Blue API is a RESTful API that can be accessed by an HTTP client such as `curl`, or any HTTP library which is part of most modern programming languages. This API reference is autogenerated from [protocol buffers](https://developers.google.com/protocol-buffers) defined in this [repository](https://github.com/alphauslabs/blueapi), together with our supported [client libraries](https://alphauslabs.github.io/blueapi/sdks/). See the official [documentation](https://alphauslabs.github.io/blueapi/) for more information.\n\nYou may encounter the following feature maturity indicators:\n- **(BETA)** - New or experimental features, subject to changes; and\n- **(Deprecated)** - Outdated or replaced features.\n\nSome endpoints, especially those that return lists of resources, have streaming responses; newline-separated stream of “chunks”. Each chunk is an envelope that can contain either a response message or an error. Only the last chunk will include an error, if any.";
    version: "v0.beta";
    contact: {
      name: "Alphaus: Blue API";
      url: "https://alphauslabs.github.io/blueapi/";
    };
    license: {
      name: "License: Apache License 2.0";
      url: "https://github.com/alphauslabs/blueapi/blob/main/LICENSE";
    };
  };
  host: "api.alphaus.cloud";
  base_path: "/m/blue";
  schemes: HTTPS;
};

// Admin service definition.
service Admin {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "(BETA) Admin API. Base URL: https://api.alphaus.cloud/m/blue"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/admin/";
      description: "Service definition";
    }
  };

  // Get all account groups under caller's organization.
  rpc GetAcctGroups(GetAcctGroupsRequest) returns (GetAcctGroupsResponse) {
    option (google.api.http) = {
      get: "/v1/acctgroups"
    };
  }
}

// Request message for the Admin.GetAcctGroups rpc.
message GetAcctGroupsRequest {}

// Request message for the Admin.GetAcctGroups rpc.
message GetAcctGroupsResponse {
  repeated api.AcctGroup acctGroups = 1;
}

syntax = "proto3";

package blueapi.globalconfig.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/globalconfig";
option java_package = "cloud.alphaus.api.globalconfig";
option java_outer_classname = "GlobalConfigProto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Alphaus Blue: GlobalConfig service";
    version: "1.0";
    contact: {
      name: "Alphaus Blue: GlobalConfig service";
      url: "https://alphauslabs.github.io/blueapi/apis/globalconfig.html";
    };
    license: {
      name: "License: Apache License 2.0";
      url: "https://github.com/alphauslabs/blueapi/blob/main/LICENSE";
    };
  };
  external_docs: {
    url: "https://alphauslabs.github.io/blueapi/apis/globalconfig.html";
    description: "More about Alphaus Blue: GlobalConfig service";
  }
};

// GlobalConfig service.
service GlobalConfig {
  rpc StreamReadWaveConfig (StreamConfigRequest) returns (stream StreamListConfigResponse) {
    option (google.api.http) = {
      get: "/wave/v1/config"
    };
  }

  rpc StreamReadRippleConfig (StreamConfigRequest) returns (stream StreamListConfigResponse) {
    option (google.api.http) = {
      get: "/ripple/v1/config"
    };
  }
}

// Response message for Config.
message Config {
  // The feature name.
  string feature_id = 1;

  // Required. The feature id.
  string feature_name = 2;

  // The feature enabled or disabled.
  // Set value to enable or disable the use of the feature.
  bool enabled = 3;
}

// Request message for GlobalConfig.Config.
message StreamConfigRequest {}

// Response message for GlobalConfig.Config.
message StreamListConfigResponse {
  // A list of global configs
  repeated Config config = 1;
}
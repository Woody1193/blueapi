syntax = "proto3";

package blueapi.cost.v1;

import "api/operation.proto";
import "api/budget.proto";
import "api/forecast.proto";
import "api/aws/cost.proto";
import "api/aws/adjustment.proto";
import "api/aws/account.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/cost";
option java_package = "cloud.alphaus.api.cost";
option java_outer_classname = "CostProto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Alphaus Blue: Cost Service";
    version: "1.0";
    contact: {
      name: "Alphaus Blue: Cost Service";
      url: "https://alphauslabs.github.io/blueapi/apis/cost.html";
    };
    license: {
      name: "License: Apache License 2.0";
      url: "https://github.com/alphauslabs/blueapi/blob/main/LICENSE";
    };
  };
  external_docs: {
    url: "https://alphauslabs.github.io/blueapi/apis/cost.html";
    description: "More about Alphaus Blue: Cost Service";
  }
};

// Service for reading aggregated costs for your cloud costs and usages.
service Cost {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Base URL: https://api.alphaus.cloud/m/blue/cost"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/cost/";
      description: "Service definition";
    }
  };

  // Lists AWS management accounts.
  rpc ListManagementAccounts(ListManagementAccountsRequest) returns (ListManagementAccountsResponse) {
    option (google.api.http) = {
      get: "/v1/aws/managementaccts"
    };
  }

  // Gets an AWS management account. This call includes all of the account's metadata.
  // See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
  rpc GetManagementAccount(GetManagementAccountRequest) returns (api.aws.Account) {
    option (google.api.http) = {
      get: "/v1/aws/managementaccts/{id}"
    };
  }

  // Gets an AWS management account's update history, which is a list of timestamps our system tracks when the account's CUR files are
  // exported to your S3 by AWS, which in turn, triggers the import from your S3 to our system for processing.
  rpc GetManagementAccountUpdateHistory(GetManagementAccountUpdateHistoryRequest) returns (GetManagementAccountUpdateHistoryResponse) {
    option (google.api.http) = {
      get: "/v1/aws/managementaccts/{id}/updatehistory"
    };
  }

  // Registers an AWS management account. See [https://docs.aws.amazon.com/cur/latest/userguide/cur-create.html]
  // for more information. Requirements include: Additional report details = 'Include Resource IDS' enabled,
  // Prefix = non-empty (recommendation only), Time granularity = 'Hourly', File format = 'text/csv'.
  rpc CreateManagementAccount(CreateManagementAccountRequest) returns (api.aws.Account) {
    option (google.api.http) = {
      post: "/v1/aws/managementaccts"
      body: "*"
    };
  }

  // Deletes an AWS management account.
  rpc DeleteManagementAccount(DeleteManagementAccountRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/aws/managementaccts/{id}"
    };
  }

  // Initiates an ondemand import of all registered CUR files.
  rpc ImportCurFiles(ImportCurFilesRequest) returns (api.Operation) {
    option (google.api.http) = {
      post: "/v1/aws:importCurFiles"
      body: "*"
    };
  }

  // Triggers monthly calculations for costs and invoices at either organization or billing group level.
  rpc CalculateCosts(CalculateCostsRequest) returns (api.Operation) {
    option (google.api.http) = {
      post: "/v1/{vendor}:calculateCosts"
      body: "*"
    };
  }

  // Reads the usage-based cost details of an organization (Ripple) or billing group (Wave).
  // At the moment, the supported {vendor} is 'aws'. If datetime range parameters are
  // not set, month-to-date (current month) will be returned.
  rpc ReadCosts (ReadCostsRequest) returns (stream CostItem) {
    option (google.api.http) = {
      post: "/v1/{vendor}/costs:read"
      body: "*"
    };
  }

  // Reads the non-usage-based details of an organization (Ripple) or billing group (Wave).
  // This API covers non-usage-based adjustments, such as Fees, Credits, Discounts, Tax,
  // Upfront Fees, etc. At the moment, the supported {vendor} is 'aws'. If datetime
  // range parameters are not set, month-to-date (current month) will be returned.
  rpc ReadAdjustments (ReadAdjustmentsRequest) returns (stream AdjustmentItem) {
    option (google.api.http) = {
      post: "/v1/{vendor}/adjustments:read"
      body: "*"
    };
  }

  // Reads the usage-based tag costs of a billing group. At the moment, the supported {vendor} is 
  // 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
  rpc ReadBillingGroupTagCosts (ReadBillingGroupTagCostsRequest) returns (stream CostItem) {
    option (google.api.http) = {
      post: "/v1/{vendor}/billinggroups/{id}/tagcosts:read"
    };
  }

  // Reads the usage-based tag costs of an AWS account. At the moment, the supported {vendor} is 
  // 'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.
  rpc ReadAccountTagCosts (ReadAccountTagCostsRequest) returns (stream CostItem) {
    option (google.api.http) = {
      post: "/v1/{vendor}/accounts/{id}/tagcosts:read"
    };
  }

  // Creates a budget configuration.
  rpc CreateBudgetConfig(CreateBudgetConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/{vendor}/budgets/configuration"
      body: "budgetConfig"
    };
  }

  // Updates an existing budget configuration.
  rpc UpdateBudgetConfig(UpdateBudgetConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/{vendor}/budgets/configuration/{budgetConfigId}"
      body: "budgetConfig"
    };
  }

  // Fetches budget configurations for all accounts under the specified billing group.
  // Set accountId to fetch budget configuration for specific account only.
  rpc GetBudgetConfig(GetBudgetConfigRequest) returns (GetBudgetConfigResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/budgets/configuration/{billingGroupId}"
    };
  }

  // Fetches cost forecasts for the specified billing group.
  // Includes historical cost (up to previous month) and forecasted cost (up to three months for now).
  rpc GetForecasts(GetForecastsRequest) returns (GetForecastsResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/forecasts/{billingGroupId}"
    };
  }

  // Fetches month-to-date accumulated costs vs forecasted cost vs budget for the specified billing group.
  rpc GetMonthToDateForecast(GetMonthToDateForecastRequest) returns (GetMonthToDateForecastResponse) {
    option (google.api.http) = {
      get: "/v1/{vendor}/forecasts/month-to-date/{billingGroupId}"
    };
  }

}

// Request message for the Cost.ListManagementAccounts rpc.
message ListManagementAccountsRequest {}

// Response message for the Organization.ListManagementAccounts rpc.
message ListManagementAccountsResponse {
  repeated api.aws.Account accounts = 1;
}

// Request message for the Cost.GetManagementAccount rpc.
message GetManagementAccountRequest {
  // Required. The id of the account to get.
  string id = 1;
}

// Request message for the Cost.GetManagementAccountUpdateHistory rpc.
message GetManagementAccountUpdateHistoryRequest {
  // Required. The management account id to query.
  string id = 1;

  // Optional. The month to query. If empty, defaults to current month.
  // Format is `yyyymm`. For example, June 2021 will be `202106`.
  string month = 2;
}

// Response message for the Cost.GetManagementAccountUpdateHistory rpc.
message GetManagementAccountUpdateHistoryResponse {
  // The management account id being queried.
  string id = 1;

  // The month being queried.
  string month = 2;

  // The list of timestamps the account was updated and imported.
  repeated string timestamps = 3;
}

// Request message for the Cost.CreateManagementAccount rpc.
message CreateManagementAccountRequest {
  // Required. The id of the management account.
  string id = 1;

  // Optional. The name, or description of the management account.
  // This is set to `id` when not specified.
  string name = 2;

  // Required. S3 Bucket name.
  string bucketName = 3;

  // Optional. Prefix.
  string prefix = 4;

  // Required. Report name.
  string reportName = 5;

  // Required. Role ARN for Alphaus to assume for access.
  string roleArn = 6;
}

// Request message for the Cost.DeleteManagementAccount rpc.
message DeleteManagementAccountRequest {
  // Required. The id of the management account.
  string id = 1;
}

// Request message for the Cost.ImportCurFiles rpc.
message ImportCurFilesRequest {
  // Optional. The month to import. If empty, it defaults to the current month.
  // Format is `yyyymm`. For example, June 2021 will be `202106`.
  string month = 1;

  // Optional. A comma-separated list of management accounts to import. If empty,
  // all CURs associated with all your management accounts will be imported.
  string filter = 2;
}

// Response message wrapper for cloud costs.
message CostItem {
  api.aws.Cost aws = 1;
}

// AWS-specific options.
message AwsOptions {
  // Optional. If set to true, stream will include resource tags. Note that this could
  // potentially increase the data size if you have lots of tag information.
  bool includeTags = 1;

  // Optional. If set to true, stream will include resource cost category information.
  // Note that this could potentially increase the data size if you have lots of cost
  // category information.
  bool includeCostCategories = 2;
}

// Request message for the Cost.CalculateCosts rpc.
message CalculateCostsRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;

  // Optional. If set to a particular billing group, calculate for that billing group.
  // If empty, calculate for all billing groups.
  //
  // At the moment, for AWS, this is only valid for account type billing groups, not
  // tag billing groups. If a tag billing group is provided, it is discarded and the
  // calculation is done for the whole organization.
  string billingGroupId = 2;

  // Optional. The month to calculate. If empty, it defaults to the previous month.
  // Format is `yyyymm`. For example, June 2021 will be `202106`.
  string month = 3;
}

// Request message for the Cost.ReadCosts rpc.
message ReadCostsRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;

  // Optional. If set, reads the usage-based cost details of this billing group. Valid
  // only if `accountId` is not set. If both `companyId` and `accountId` are not set,
  // reads the usage-based cost details of the whole organization.
  // Only valid for Ripple users. Implied (or discarded) for Wave(Pro) users.
  string companyId = 2;

  // Optional. If set, reads the usage-based cost details of this account. Also invalidates
  // the `billingGroupId` value even if set. If both `billingGroupId` and `accountId` are
  // not set, reads the usage-based cost details of the whole organization.
  string accountId = 3;

  // Optional. Timestamp to start streaming data from. If not set, the first day of the
  // current month will be used. Format: yyyymmdd.
  string startTime = 4;

  // Optional. Timestamp to end the streaming data. If not set, current date will be used.
  // Format: `yyyymmd`.
  string endTime = 5;

  // Optional. AWS-specific request options.
  AwsOptions awsOptions = 6;
}

// Response message wrapper for cloud cost adjustments.
message AdjustmentItem {
  api.aws.Adjustment aws = 1;
}

// Request message for the Cost.ReadAdjustments rpc.
message ReadAdjustmentsRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;

  // Optional. If set, reads the non-usage-based adjustment details of this billing group.
  // Valid only if `accountId` is not set. If both `companyId` and `accountId` are not
  // set, reads the adjustment details of the whole organization.
  // Only valid for Ripple users. Implied (or discarded) for Wave(Pro) users.
  string companyId = 2;

  // Optional. If set, reads the non-usaged-based adjustment details of this account. Also
  // invalidates the `billingGroupId` value even if set. If both `billingGroupId` and
  // `accountId` are not set, reads the adjustment details of the whole organization.
  string accountId = 3;

  // Optional. Timestamp to start streaming data from. If not set, the first day of the
  // current month will be used. Format: `yyyymmdd`.
  string startTime = 4;

  // Optional. Timestamp to end the streaming data. If not set, current date will be used.
  // Format: `yyyymmdd`.
  string endTime = 5;
}

// Request message for the Cost.ReadBillingGroupTagCosts rpc.
message ReadBillingGroupTagCostsRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;

  // Required. The billing group id to stream.
  string id = 2;

  // Optional. Timestamp to start streaming data from. If not set, the first day of the
  // current month will be used. Format: `yyyymmdd`.
  string startTime = 3;

  // Optional. Timestamp to end the streaming data. If not set, current date will be used.
  // Format: `yyyymmdd`.
  string endTime = 4;
}

// Request message for the Cost.ReadAccountTagCosts rpc.
message ReadAccountTagCostsRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;

  // Required. The AWS account id to stream.
  string id = 2;

  // Optional. Timestamp to start streaming data from. If not set, the first day of the
  // current month will be used. Format: `yyyymmdd`.
  string startTime = 3;

  // Optional. Timestamp to end the streaming data. If not set, current date will be used.
  // Format: `yyyymmdd`.
  string endTime = 4;
}

// Request message for CreateBudgetConfig.
message CreateBudgetConfigRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;

  // Required. Budget configuration to save.
  api.BudgetConfiguration budgetConfig = 2;
}

// Request message for UpdateBudgetConfig.
message UpdateBudgetConfigRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;
  
  // Required. Budget configuration id to update.
  string budgetConfigId = 2;

  // Required. Budget configuration with update information.
  api.BudgetConfiguration budgetConfig = 3;
}

// Request message for GetBudgetConfig.
message GetBudgetConfigRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;
  
  // Required. Billing group id to retrieve.
  string billingGroupId = 2;
  
  // Optional. If set, only budget configuration for the specified account is returned.
  string accountId = 3;
}

// Response message for GetBudgetConfig.
// If accountId is specified in the request, only one budget configuration is returned.
message GetBudgetConfigResponse {
  repeated api.BudgetConfiguration data = 1;
}

// Request message for GetForecasts per billing group.
message GetForecastsRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;
  
  // Required. Billing group id to retrieve.
  string billingGroupId = 2;
  
  // Optional. Forecast frequency. Valid values are `daily` and `monthly`. 
  // Default value is `daily`.
  string frequency = 3;
  
  // Optional. Forecast granularity. Valid values are `account`, `category` and `product`.
  // Default value is `account`.
  string level = 4;
  
  // Optional. Starting date to get data.
  // If from_date is less than current date, historical costs are included.
  // If from_date is greater than current date, only forecasted costs are returned.
  // Format: `yyyymmdd`.
  string fromDate = 5; 
 
  // Optional. Last date to get forecast cost. 
  // Currently, we only support 90 days forecasting from the first day of current month.
  // Format: `yyyymmdd`.
  string toDate = 6;
}

// Response message for GetForecasts per billing group.
message GetForecastsResponse {
  api.BillingGroupForecast data = 1;
}

// Request message for GetMonthToDateForecast per billing group.
message GetMonthToDateForecastRequest {
  // Required. Valid values are `aws`, `azure`, and `gcp`.
  string vendor = 1;
  
  // Required. Billing group id to retrieve.
  string billingGroupId = 2;
}

// Response message for GetMonthToDateForecast per billing group.
message GetMonthToDateForecastResponse {
  api.BillingGroupMonthToDateForecast data = 1;
}

syntax = "proto3";

package blueapi.iam.v1;

import "api/user.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/alphauslabs/blueapi/iam";
option java_package = "cloud.alphaus.api.iam";
option java_outer_classname = "IamProto";

// IAM service definition.
service Iam {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
		description: "Base URL: https://api.alphaus.cloud/m/blue"
		external_docs: {
			url: "https://github.com/alphauslabs/blueapi/tree/main/iam/";
			description: "Service definition";
		}
	};

  // Gets user information about the caller. This call includes all of the user metadata.
  // See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
  rpc WhoAmI(WhoAmIRequest) returns (api.User) {
    option (google.api.http) = {
      get: "/iam/v1/whoami"
    };
  }

  // Lists all subusers.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/iam/v1/users"
    };
  }

  // Gets subuser information. This call includes all of the subuser metadata. See
  // https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
  // If the {name} parameter is 'me' or '-', returns the caller information, which
  // is equivalent to `WhoAmI()` or `GET:/iam/v*/whoami`.
  rpc GetUser(GetUserRequest) returns (api.User) {
    option (google.api.http) = {
      get: "/iam/v1/users/{name}"
    };
  }
}

// Request message for Iam.WhoAmI rpc.
message WhoAmIRequest {}

// Request message for Iam.ListUsers rpc.
message ListUsersRequest {}

// Response message for Iam.ListUsers rpc.
message ListUsersResponse {
  repeated api.User users = 1;
}

// Request message for Iam.GetUser rpc.
message GetUserRequest {
  string name = 1;
}
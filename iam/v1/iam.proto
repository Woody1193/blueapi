syntax = "proto3";

package blueapi.iam.v1;

import "api/user.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/alphauslabs/blueapi/iam";
option java_package = "cloud.alphaus.api.iam";
option java_outer_classname = "IamProto";

// IAM service definition.
service Iam {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Base URL: https://api.alphaus.cloud/m/blue"
    external_docs: {
      url: "https://github.com/alphauslabs/blueapi/tree/main/iam/";
      description: "Service definition";
    }
  };

  // Gets user information about the caller. This call includes all of the user metadata.
  // See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
  rpc WhoAmI(WhoAmIRequest) returns (api.User) {
    option (google.api.http) = {
      get: "/iam/v1/whoami"
    };
  }

  // Lists all subusers.
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/iam/v1/users"
    };
  }

  // Gets subuser information. This call includes all of the subuser metadata. See
  // [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.
  // If the `{name}` parameter is `me` or `-`, returns the caller information, which
  // is equivalent to `WhoAmI()` or `GET:/iam/v*/whoami`.
  rpc GetUser(GetUserRequest) returns (api.User) {
    option (google.api.http) = {
      get: "/iam/v1/users/{name}"
    };
  }

  // Lists all IP filters. At the moment, this API is only available for root users.
  rpc ListIpFilters(ListIpFiltersRequest) returns (ListIpFiltersResponse) {
    option (google.api.http) = {
      get: "/iam/v1/ipfilters"
    };
  }

  // Creates an IP filter item for IP blacklisting or whitelisting. At the moment,
  // this API is only available for root users.
  rpc CreateIpFilter(CreateIpFilterRequest) returns (IpFilter) {
    option (google.api.http) = {
      post: "/iam/v1/ipfilters"
      body: "*"
    };
  }

  // Deletes an IP filter item. At the moment, this API is only available for root users.
  rpc DeleteIpFilter(DeleteIpFilterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/iam/v1/ipfilters/{name}"
    };
  }
}

// Request message for the Iam.WhoAmI rpc.
message WhoAmIRequest {}

// Request message for the Iam.ListUsers rpc.
message ListUsersRequest {}

// Response message for the Iam.ListUsers rpc.
message ListUsersResponse {
  repeated api.User users = 1;
}

// Request message for the Iam.GetUser rpc.
message GetUserRequest {
  string name = 1;
}

message IpFilter {
  // IP filter item name. Note that this name is transcient and is not fixed. However,
  // you can use any of its permutations to endpoints that accept it, such as
  // the `DELETE:/iam/v?/ipfilters/{name}` endpoint, without issues.
  string name = 1;

  // Can be `global`, `rootuser`, or `subuser`.
  string scope = 2;

  // The target of the filter. If global scope, this is usually empty.
  // Rootuser name for rootuser scope, and subuser name for subuser scope.
  // For subuser targets, format is `rootuser/subuser`.
  string target = 3;

  // The type of IP filter. It could be `whitelist` or `blacklist`.
  string type = 4;

  // The IP filter value. Should be in CIDR format.
  string value = 5;
}

// Request message for the Iam.ListIpFilters rpc.
message ListIpFiltersRequest {}

// Response message for the Iam.ListIpFilters rpc.
message ListIpFiltersResponse {
  repeated IpFilter items = 1;
}

// Request message for the Iam.CreateIpFilter rpc.
message CreateIpFilterRequest {
  // Required. The IP input to filter, either blacklist or whitelist. Should be in
  // CIDR format (i.e. 1.2.3.4/32).
  string value = 1;

  // Optional. Can be `whitelist` or `blacklist`. Defaults to `blacklist` if empty.
  string type = 2;

  // Optional. If valid rootuser and sub_user is empty, filter is for this rootuser.
  // If both root_user and sub_user inputs are empty, filter is at global scope.
  string root_user = 3 [json_name = "root_user"];

  // Optional. If valid subuser, filter is for this subuser; root_user value is discarded.
  // If both root_user and sub_user inputs are empty, filter is at global scope.
  string sub_user = 4 [json_name = "sub_user"];
}

// Request message for the Iam.DeleteIpFilter rpc.
message DeleteIpFilterRequest {
  // The IP filter name to delete.
  string name = 1;
}

syntax = "proto3";

package blueapi.org.v1;

import "api/ripple/org.proto";
import "api/aws/account.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/alphauslabs/blueapi/org";
option java_package = "cloud.alphaus.api.org";
option java_outer_classname = "OrgProto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Alphaus: Blue API";
    version: "1.0";
    contact: {
      name: "Alphaus: Blue API";
      url: "https://alphauslabs.github.io/blueapi/";
    };
    license: {
      name: "License: Apache License 2.0";
      url: "https://github.com/alphauslabs/blueapi/blob/main/LICENSE";
    };
  };
  external_docs: {
    url: "https://docs.mobingi.com/v/api-reference/";
    description: "Our existing, non-Blue API documentation";
  }
};

// Organization service definition.
service Organization {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
		description: "Base URL: https://api.alphaus.cloud/m/blue"
		external_docs: {
			url: "https://github.com/alphauslabs/blueapi/blob/main/org/v1/org.proto";
			description: "Service definition";
		}
	};

  // Creates the organization account.
  rpc CreateOrg(CreateOrgRequest) returns (CreateOrgResponse) {
    option (google.api.http) = {
      post: "/org/v1"
      body: "*"
    };
  }

  // Sends (or resends) the verification email. Only valid for unverified
  // organizations. The verification key will be valid for a day.
  rpc SendVerification(SendVerificationRequest) returns (api.ripple.Org) {
    option (google.api.http) = {
      post: "/org/v1:sendVerification"
    };
  }

  // Verifies an organization using the key received from the verification email.
  // The verification key is only valid for a day.
  rpc VerifyOrg(VerifyOrgRequest) returns (api.ripple.Org) {
    option (google.api.http) = {
      post: "/org/v1:verify"
    };
  }

  // Gets information about the caller's organization.
  rpc GetOrg(GetOrgRequest) returns (api.ripple.Org) {
    option (google.api.http) = {
      get: "/org/v1"
    };
  }

  // Updates organization metadata. See https://alphauslabs.github.io/blueapi/
  // for the list of supported attributes.
  rpc UpdateMetadata(UpdateMetadataRequest) returns (api.ripple.Org) {
    option (google.api.http) = {
      put: "/org/v1/metadata"
      body: "*"
    };
  }

  // Updates the organization password.
  rpc UpdatePassword(UpdatePasswordRequest) returns (api.ripple.Org) {
    option (google.api.http) = {
      put: "/org/v1/passwd"
      body: "*"
    };
  }

  // Lists master accounts that belongs to the caller's organization.
  rpc ListMasterAccounts(ListMasterAccountsRequest) returns (ListMasterAccountsResponse) {
    option (google.api.http) = {
      get: "/org/v1/masteraccts"
    };
  }

  // Get master account. This call includes all of the account's metadata. See
  // https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
  rpc GetMasterAccount(GetMasterAccountRequest) returns (api.aws.Account) {
    option (google.api.http) = {
      get: "/org/v1/masteraccts/{id}"
    };
  }

  // Deletes the organization.
  rpc DeleteOrg(DeleteOrgRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/org/v1"
    };
  }
}

// Request message for Organization.CreateOrg rpc.
message CreateOrgRequest {
  string email = 1;
  string description = 2;
}

// Response message for Organization.CreateOrg rpc.
message CreateOrgResponse {
  api.ripple.Org org = 1;
  string password = 2;
}

// Request message for Organization.SendVerification rpc.
message SendVerificationRequest {}

// Request message for Organization.VerifyOrg rpc.
message VerifyOrgRequest {
  string key = 1;
}

// Request message for Organization.GetOrg rpc.
message GetOrgRequest {}

// Request message for Organization.UpdateMetadata rpc.
message UpdateMetadataRequest {
  string key = 1;
  string value = 2;
}

// Request message for Organization.UpdatePassword rpc.
message UpdatePasswordRequest {
  string old_password = 1;
  string new_password = 2;
}

// Request message for Organization.ListMasterAccounts rpc.
message ListMasterAccountsRequest {}

// Response message for Organization.ListMasterAccounts rpc.
message ListMasterAccountsResponse {
  repeated api.aws.Account accounts = 1;
}

// Request message for Organization.GetMasterAccount rpc.
message GetMasterAccountRequest {
  string id = 1;
}

// Request message for Organization.DeleteOrg rpc.
message DeleteOrgRequest {}